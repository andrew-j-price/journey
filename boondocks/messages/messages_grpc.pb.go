// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: boondocks/messages/messages.proto

package messages

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BoonServiceClient is the client API for BoonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BoonServiceClient interface {
	PerformHelloWorld(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	PlayRps(ctx context.Context, in *RpsChoice, opts ...grpc.CallOption) (*RpsScore, error)
}

type boonServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBoonServiceClient(cc grpc.ClientConnInterface) BoonServiceClient {
	return &boonServiceClient{cc}
}

func (c *boonServiceClient) PerformHelloWorld(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/messages.BoonService/PerformHelloWorld", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boonServiceClient) PlayRps(ctx context.Context, in *RpsChoice, opts ...grpc.CallOption) (*RpsScore, error) {
	out := new(RpsScore)
	err := c.cc.Invoke(ctx, "/messages.BoonService/PlayRps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BoonServiceServer is the server API for BoonService service.
// All implementations must embed UnimplementedBoonServiceServer
// for forward compatibility
type BoonServiceServer interface {
	PerformHelloWorld(context.Context, *HelloRequest) (*HelloResponse, error)
	PlayRps(context.Context, *RpsChoice) (*RpsScore, error)
	mustEmbedUnimplementedBoonServiceServer()
}

// UnimplementedBoonServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBoonServiceServer struct {
}

func (UnimplementedBoonServiceServer) PerformHelloWorld(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformHelloWorld not implemented")
}
func (UnimplementedBoonServiceServer) PlayRps(context.Context, *RpsChoice) (*RpsScore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayRps not implemented")
}
func (UnimplementedBoonServiceServer) mustEmbedUnimplementedBoonServiceServer() {}

// UnsafeBoonServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BoonServiceServer will
// result in compilation errors.
type UnsafeBoonServiceServer interface {
	mustEmbedUnimplementedBoonServiceServer()
}

func RegisterBoonServiceServer(s grpc.ServiceRegistrar, srv BoonServiceServer) {
	s.RegisterService(&BoonService_ServiceDesc, srv)
}

func _BoonService_PerformHelloWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoonServiceServer).PerformHelloWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.BoonService/PerformHelloWorld",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoonServiceServer).PerformHelloWorld(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoonService_PlayRps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpsChoice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoonServiceServer).PlayRps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.BoonService/PlayRps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoonServiceServer).PlayRps(ctx, req.(*RpsChoice))
	}
	return interceptor(ctx, in, info, handler)
}

// BoonService_ServiceDesc is the grpc.ServiceDesc for BoonService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BoonService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "messages.BoonService",
	HandlerType: (*BoonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PerformHelloWorld",
			Handler:    _BoonService_PerformHelloWorld_Handler,
		},
		{
			MethodName: "PlayRps",
			Handler:    _BoonService_PlayRps_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "boondocks/messages/messages.proto",
}
